{"version":3,"sources":["Utils/Bus.js","lib/function.js","app.config.js","shared/auth-service.js","components/pages/contact/contact-page-form.js","shared/mail-service.js","components/header/index.js","components/header/header.js","components/pages/contact/contact-page.js","components/pages/auth/login-form.js","components/pages/auth/login-page.js","shared/order-service.js","components/pages/orders/orders-page.js","components/pages/orders/order-info-page.js","shared/customer-service.js","components/pages/customer/customer-info-page.js","components/pages/customer/customer-page.js","components/buttons/exports.js","components/pages/balance-page.js","components/pages/document-page.js","components/pages/main-page.js","components/Flash/index.js","serviceWorker.js","index.js","components/app/App.js"],"names":["EventEmitter","getItem","name","localStorage","setItem","value","removeItem","formatDate","date","dd","getDate","mm","getMonth","yy","getFullYear","url","user_id","authService","this","body","fetch","method","mode","cache","credentials","headers","JSON","stringify","fetchItem","json","result_answer","tokens","user","token","fun","access","expiredIn","refresh","customer_id","time_auth_token","time_token","now","Date","getTime","clear","refresh_token","console","log","data","accessToken","config","withRouter","sendMessage","changeHandler","state","useEffect","a","checkAuthTokenTime","user_func","auth_token","to","className","lg","icon","label","onChange","iconClass","type","id","email","subject","text","color","onClick","style","height","src","title","width","frameBorder","border","md","tag","floating","mailService","Error","Header","isAuth","isOpen","loggOut","setState","toggleCollapse","dark","expand","navbar","left","active","right","Component","send","answer","code","window","scrollTo","top","behavior","flash","reset","event","target","submitHandler","isLoggedIn","onLogin","check","onSubmit","noValidate","group","validate","error","success","password","signIn","login","then","r","preventDefault","orderService","items","items_to_table","result","forEach","elem","arrayToTable","order_id","firstname","lastname","date_added","order_status","oc_order_status","telephone","total","action","size","push","match","params","getAllProductToOrderById","data_products","comment","payment_zone","shipping_method","payment_method","products","useState","setItems","getAllOrdersForUser","fetchItems","columns","field","sort","rows","striped","bordered","hover","getInfo","sm","marginTop","map","item","key","responsiveSm","product","product_id","model","quantity","price","customerService","result_code","description","points","toggle","update","changeState","setStateFromSevice","modal","containerClassName","inputs","noTag","prepend","activeItem","role","tabId","rounded","CustomerPage","tab","e","toggleModal","updateInfo","updateCutomer","location","reload","setStateFromService","arr","ExportCSV","csvData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","getReward","getRewardTotal","count","getRewardSum","href","rel","download","xl","aria-valuemax","aria-valuemin","aria-valuenow","Flash","visibility","setVisibility","message","setMessage","setType","Bus","addListener","setTimeout","document","querySelector","addEventListener","Boolean","hostname","ReactDOM","render","emit","path","exact","component","LoginPage","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4e138e8.chunk.js","sourcesContent":["import EventEmitter from 'events';\r\nexport default new EventEmitter();","export default {\r\n    getItem (name){\r\n        return localStorage.getItem(name);\r\n    },\r\n\r\n    setItem (name, value) {\r\n        localStorage.setItem(name,value);\r\n    },\r\n    removeItem ( name )\r\n    {\r\n        localStorage.removeItem(name);\r\n    },\r\n    formatDate(date) {\r\n\r\n        let dd = date.getDate();\r\n        if (dd < 10) dd = '0' + dd;\r\n\r\n        let mm = date.getMonth() + 1;\r\n        if (mm < 10) mm = '0' + mm;\r\n\r\n        let yy = date.getFullYear() % 100;\r\n        if (yy < 10) yy = '0' + yy;\r\n\r\n        return dd + '.' + mm + '.' + yy;\r\n    }\r\n}","import fun from \"./lib/function\";\r\n\r\nexport default {\r\n    url: 'https://api.zoocomplex.com.ua/api/',\r\n    // url: 'http://localhost:3001/api/',\r\n    // user_id: fun.getItem('user_id'),\r\n    user_id: localStorage.getItem('user_id'),\r\n}","import config from '../app.config'\r\nimport fun from \"../lib/function\";\r\n\r\nclass AuthService {\r\n\r\n    constructor(url, user_id) {\r\n        this.url = url;\r\n        this.user_id = user_id;\r\n    }\r\n\r\n    async signIn(body) {\r\n\r\n        const fetchItem = await fetch(`${this.url}customers/login`, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors', // no-cors, cors, *same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        let result_answer = await fetchItem.json();\r\n\r\n        const {tokens, user} = result_answer[0];\r\n\r\n        if (result_answer[0].token !== null) {\r\n            fun.setItem('auth_token', tokens.access.token);\r\n            fun.setItem('time_auth_token', tokens.access.expiredIn);\r\n            fun.setItem('refresh_token', tokens.refresh.token);\r\n            fun.setItem('time_token', tokens.refresh.expiredIn);\r\n            fun.setItem('user_id', user.customer_id);\r\n            return true;\r\n        } else {\r\n            fun.setItem('auth_token', null);\r\n            return false;\r\n        }\r\n    }\r\n    async checkAuthTokenTime () {\r\n\r\n        const time_auth_token = fun.getItem('time_auth_token'),\r\n            time_token = fun.getItem('time_token'),\r\n            now = new Date().getTime();\r\n\r\n        if (now > time_token) {\r\n            localStorage.clear();\r\n        }\r\n\r\n        if (now > time_auth_token) {\r\n\r\n            const refresh_token = {\r\n                token: fun.getItem('refresh_token')\r\n            };\r\n            console.log();\r\n            const data = await fetch(`${this.url}customers/token`, {\r\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                mode: 'cors', // no-cors, cors, *same-origin\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(refresh_token),\r\n            });\r\n\r\n            const token = await data.json();\r\n            fun.setItem('auth_token', token.accessToken);\r\n        }\r\n\r\n        return true;\r\n\r\n    };\r\n\r\n}\r\n\r\nexport const authService = new AuthService(config.url,config.user_id);","import React, {useEffect} from 'react';\r\nimport {MDBRow, MDBCol, MDBCard, MDBCardBody, MDBIcon, MDBBtn, MDBInput, MDBContainer} from \"mdbreact\";\r\nimport { Redirect,withRouter } from 'react-router-dom';\r\nimport {authService} from \"../../../shared/auth-service\";\r\nimport fun from \"../../../lib/function\";\r\n\r\nconst ContactPageForm = ({sendMessage, changeHandler,state}) => {\r\n\r\n    useEffect(() => {\r\n        const user_func = async ()=>{\r\n            await authService.checkAuthTokenTime();\r\n        };\r\n\r\n        user_func();\r\n    },[]);\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n\r\n\r\n\r\n    if(auth_token === 'null' || auth_token === null){\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <section className=\"my-5\">\r\n                <h2 className=\"h1-responsive font-weight-bold text-center my-5\">\r\n                    Contact us\r\n                </h2>\r\n                <p className=\"text-center w-responsive mx-auto pb-5\">\r\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit,\r\n                    error amet numquam iure provident voluptate esse quasi, veritatis\r\n                    totam voluptas nostrum quisquam eum porro a pariatur veniam.\r\n                </p>\r\n                <MDBRow>\r\n                    <MDBCol lg=\"5\" className=\"lg-0 mb-4\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <div className=\"form-header blue accent-1\">\r\n                                    <h3 className=\"mt-2\">\r\n                                        <MDBIcon icon=\"envelope\"/> Write to us:\r\n                                    </h3>\r\n                                </div>\r\n                                <p className=\"dark-grey-text\">\r\n                                    We'll write rarely, but only the best content.\r\n                                </p>\r\n                                <div className=\"md-form\">\r\n                                    <MDBInput\r\n                                        label=\"Your name\"\r\n                                        onChange={changeHandler}\r\n                                        value={state.name}\r\n                                        name=\"name\"\r\n                                        iconClass=\"grey-text\"\r\n                                        type=\"text\"\r\n                                        id=\"form-name\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <MDBInput\r\n                                        label=\"Your email\"\r\n                                        onChange={changeHandler}\r\n                                        value={state.email}\r\n                                        name=\"email\"\r\n                                        iconClass=\"grey-text\"\r\n                                        type=\"text\"\r\n                                        id=\"form-email\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <MDBInput\r\n                                        label=\"Subject\"\r\n                                        onChange={changeHandler}\r\n                                        value={state.subject}\r\n                                        name=\"subject\"\r\n                                        iconClass=\"grey-text\"\r\n                                        type=\"text\"\r\n                                        id=\"form-subject\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <MDBInput\r\n                                        label=\"Text\"\r\n                                        onChange={changeHandler}\r\n                                        value={state.text}\r\n                                        name=\"text\"\r\n                                        iconClass=\"grey-text\"\r\n                                        type=\"textarea\"\r\n                                        id=\"form-text\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"text-center\">\r\n                                    <MDBBtn color=\"light-blue\" onClick={sendMessage}>Submit</MDBBtn>\r\n                                </div>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol lg=\"7\">\r\n                        <div\r\n                            id=\"map-container\"\r\n                            className=\"rounded z-depth-1-half map-container\"\r\n                            style={{height: \"400px\"}}\r\n                        >\r\n                            <iframe\r\n                                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2646.3357044662826!2d35.05973264212404!3d48.450088084100415!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40dbe32a0fee9731%3A0x5e3b644a320aca86!2z0JfQvtC-0LvQvtCz0LjRjw!5e0!3m2!1sru!2sua!4v1571387978987!5m2!1sru!2sua\"\r\n                                title=\"This is a unique title\"\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                frameBorder=\"0\"\r\n                                style={{border: 0}}\r\n                            />\r\n                        </div>\r\n                        <br/>\r\n                        <MDBRow className=\"text-center\">\r\n                            <MDBCol md=\"4\">\r\n                                <MDBBtn tag=\"a\" floating color=\"blue\" className=\"accent-1\">\r\n                                    <MDBIcon icon=\"map-marker-alt\"/>\r\n                                </MDBBtn>\r\n                                <p>New York, 94126</p>\r\n                                <p className=\"mb-md-0\">United States</p>\r\n                            </MDBCol>\r\n                            <MDBCol md=\"4\">\r\n                                <MDBBtn tag=\"a\" floating color=\"blue\" className=\"accent-1\">\r\n                                    <MDBIcon icon=\"phone\"/>\r\n                                </MDBBtn>\r\n                                <p>+ 01 234 567 89</p>\r\n                                <p className=\"mb-md-0\">Mon - Fri, 8:00-22:00</p>\r\n                            </MDBCol>\r\n                            <MDBCol md=\"4\">\r\n                                <MDBBtn tag=\"a\" floating color=\"blue\" className=\"accent-1\">\r\n                                    <MDBIcon icon=\"envelope\"/>\r\n                                </MDBBtn>\r\n                                <p>info@gmail.com</p>\r\n                                <p className=\"mb-md-0\">sale@gmail.com</p>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </section>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\nexport default withRouter(ContactPageForm);","import config from '../app.config'\r\nimport fun from \"../lib/function\";\r\n\r\n\r\nclass MailService {\r\n\r\n    constructor(url) {\r\n        this.url = url;\r\n    }\r\n    async send(body) {\r\n        try {\r\n            const data = await fetch(`${this.url}mail/`, {\r\n                method:\"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                },\r\n                body:JSON.stringify(body)\r\n            });\r\n            return await data.json();\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n}\r\nexport const mailService = new MailService(config.url);\r\n","import Header from './header';\r\n\r\nexport default Header;","import React, {Component} from \"react\";\r\nimport {\r\n    MDBContainer, MDBIcon,\r\n    MDBNavbar, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse\r\n} from \"mdbreact\";\r\nimport './header.css';\r\nimport fun from '../../lib/function';\r\n\r\nclass Header extends Component {\r\n\r\n    state = {\r\n        isAuth:fun.getItem('auth_token'),\r\n        isOpen: false\r\n    };\r\n\r\n    loggOut = () => {\r\n        this.setState({isAuth: false});\r\n        localStorage.clear();\r\n    };\r\n\r\n    toggleCollapse = () => {\r\n        this.setState({isOpen: !this.state.isOpen});\r\n    };\r\n\r\n    render() {\r\n        const auth_token  = fun.getItem('auth_token');\r\n\r\n\r\n        let isAuth ;\r\n\r\n        isAuth = !(auth_token === 'null' || auth_token === null);\r\n        return (\r\n            <MDBNavbar color=\"default-color\" dark expand=\"md\" className=\"mb-5\">\r\n                <MDBContainer>\r\n                    <MDBNavbarToggler onClick={this.toggleCollapse}/>\r\n                    <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n                        <MDBNavbarNav left>\r\n                            <MDBNavItem active>\r\n                                <MDBNavLink to=\"/\">Home</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink to=\"/customer-info\">Личные данные</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink to=\"/balance\">Баланс</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink to=\"/orders\">Заказы</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink to=\"/document\">Документы</MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink to=\"/contact\">Контакты</MDBNavLink>\r\n                            </MDBNavItem>\r\n                        </MDBNavbarNav>\r\n                        <MDBNavbarNav right>\r\n                            <MDBNavItem>\r\n                                {isAuth ? <MDBNavLink to='/' onClick={this.loggOut} className=\"logout-link\"><MDBIcon icon=\"user\"/>Выйти</MDBNavLink> :''}\r\n                            </MDBNavItem>\r\n                        </MDBNavbarNav>\r\n                    </MDBCollapse>\r\n                </MDBContainer>\r\n            </MDBNavbar>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n// export default Header;","import React, {Component} from \"react\";\r\nimport ContactPageForm from './contact-page-form'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {authService} from '../../../shared/auth-service'\r\nimport {mailService} from '../../../shared/mail-service'\r\nimport Header from \"../../header\";\r\n\r\nexport default withRouter(class ContactPage extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        subject: \"\",\r\n        text: \"\"\r\n    };\r\n\r\n    reset() {\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            subject: \"\",\r\n            text: \"\"\r\n        });\r\n    }\r\n\r\n    sendMessage = async () => {\r\n        await authService.checkAuthTokenTime();\r\n        let answer = await mailService.send(this.state);\r\n        if (answer.code === 200){\r\n            window.scrollTo({ top: 0, behavior: 'smooth' });\r\n            window.flash('Your message send', 'success');\r\n            this.reset();\r\n        }else{\r\n            window.flash('record has been created successfully!', 'error');\r\n        }\r\n        console.log(answer);\r\n    };\r\n\r\n    changeHandler = event => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"box-page\">\r\n                <Header/>\r\n                <ContactPageForm\r\n                    state={this.state}\r\n                    sendMessage={this.sendMessage}\r\n                    changeHandler={this.changeHandler}\r\n                    submitHandler={this.submitHandler}/>\r\n            </div>\r\n        );\r\n    }\r\n})","import React, {useState, useEffect} from \"react\";\r\nimport {\r\n    MDBRow, MDBCol, MDBBtn, MDBContainer, MDBInput, MDBCard,\r\n    MDBCardBody,\r\n    MDBIcon,\r\n    MDBCardHeader\r\n} from \"mdbreact\";\r\nimport {Redirect,withRouter} from 'react-router-dom';\r\nimport {authService} from \"../../../shared/auth-service\";\r\nimport fun from \"../../../lib/function\";\r\n\r\n\r\nconst LoginForm = ({isLoggedIn, onLogin, changeHandler, submitHandler}) => {\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n\r\n    useEffect(() => {\r\n        const check = async () => {\r\n\r\n            await authService.checkAuthTokenTime();\r\n        };\r\n        check();\r\n    }, []);\r\n\r\n    let isAuth ;\r\n\r\n    isAuth = !(auth_token === 'null' || auth_token === null);\r\n\r\n    if (isLoggedIn || isAuth) {\r\n        return <Redirect to=\"/\"/>;\r\n    }\r\n\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <div className=\"login-form\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"12\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <MDBCardHeader className=\"form-header deep-blue-gradient rounded\">\r\n                                    <h3 className=\"my-3\">\r\n                                        <MDBIcon icon=\"lock\"/> Login:\r\n                                    </h3>\r\n                                </MDBCardHeader>\r\n                                <form className=\"needs-validation\" onSubmit={submitHandler} noValidate>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            label=\"Type your email\"\r\n                                            onChange={changeHandler}\r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            group\r\n                                            validate\r\n                                            error=\"wrong\"\r\n                                            success=\"right\"\r\n                                        />\r\n                                        <MDBInput\r\n                                            label=\"Type your password\"\r\n                                            onChange={changeHandler}\r\n                                            type=\"password\"\r\n                                            name=\"password\"\r\n                                            id=\"password\"\r\n                                            group\r\n                                            validate\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"text-center mt-4\">\r\n                                        <MDBBtn\r\n                                            color=\"light-blue\"\r\n                                            className=\"mb-3\"\r\n                                            onClick={onLogin}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Login\r\n                                        </MDBBtn>\r\n                                    </div>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </div>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React, {Component} from \"react\";\r\nimport LoginForm from './login-form'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {authService} from '../../../shared/auth-service'\r\nimport fun from '../../../lib/function'\r\n\r\nexport default withRouter(class LoginPage extends Component {\r\n\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        isLoggedIn: false,\r\n        auth_token: fun.getItem('auth_token')\r\n    };\r\n\r\n\r\n    onLogin = () => {\r\n\r\n        const {email,password} = this.state;\r\n\r\n        authService.signIn({login:email,password}).then((r)=>{\r\n            if(r){\r\n                this.setState({\r\n                    isLoggedIn: true\r\n                });\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        event.target.className += \" was-validated\";\r\n    };\r\n\r\n    changeHandler = event => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <LoginForm isLoggedIn={this.state.isLoggedIn} onLogin={this.onLogin} changeHandler={this.changeHandler}\r\n                       submitHandler={this.submitHandler}/>\r\n        );\r\n    }\r\n\r\n\r\n});\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {MDBBtn, MDBIcon} from \"mdbreact\";\r\nimport config from '../app.config'\r\nimport fun from \"../lib/function\";\r\n\r\n\r\nclass OrderService {\r\n    constructor(url) {\r\n        this.url = url;\r\n    }\r\n\r\n    async getAllOrdersForUser(user_id) {\r\n        try {\r\n            const data = await fetch(`${this.url}orders/customer/${user_id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                }\r\n            });\r\n            let items = await data.json();\r\n            let items_to_table = [];\r\n\r\n            items.result.forEach((elem) =>{\r\n                const {order_id, firstname, lastname, email, date_added, oc_order_status: {name}, telephone, total} = elem;\r\n                const arrayToTable = {\r\n                    order_id,\r\n                    firstname,\r\n                    lastname,\r\n                    email,\r\n                    date_added,\r\n                    order_status:name,\r\n                    telephone,\r\n                    total,\r\n                    action:<Link to={`/orders/${elem.order_id}`}>\r\n                        <MDBBtn color=\"purple\" size=\"sm\"><MDBIcon icon=\"eye\" /></MDBBtn>\r\n                    </Link>\r\n                };\r\n                items_to_table.push(arrayToTable);\r\n            });\r\n\r\n            return items_to_table;\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n\r\n    async getAllProductToOrderById(id) {\r\n        try {\r\n            const data = await fetch(`${this.url}orders/order_products/${id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                }\r\n            });\r\n\r\n            return await data.json();\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n\r\n    async getInfo(match) {\r\n        try {\r\n            const result = await fetch(`${this.url}orders/${match.params.id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                }\r\n            });\r\n\r\n            let items_to_table = [];\r\n\r\n            let {data} = await result.json();\r\n            let {data:data_products} = await this.getAllProductToOrderById(match.params.id);\r\n\r\n            data.forEach((elem) => {\r\n                const {firstname,comment,payment_zone,shipping_method,payment_method, lastname, email, date_added, oc_order_status: {name}, telephone, total} = elem;\r\n                let date = new Date(date_added);\r\n\r\n                const arrayToTable = {\r\n                    products:data_products,\r\n                    payment_zone,\r\n                    shipping_method,\r\n                    payment_method,\r\n                    comment,\r\n                    firstname,\r\n                    lastname,\r\n                    email,\r\n                    date_added:fun.formatDate(date),\r\n                    order_status: name,\r\n                    telephone,\r\n                    total,\r\n                };\r\n                items_to_table.push(arrayToTable);\r\n            });\r\n            return items_to_table;\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const orderService = new OrderService(config.url);","import React, {useState, useEffect} from 'react';\r\nimport {MDBContainer, MDBDataTable} from 'mdbreact';\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\nimport {authService} from \"../../../shared/auth-service\";\r\nimport {orderService} from \"../../../shared/order-service\";\r\nimport fun from '../../../lib/function'\r\nimport Header from \"../../header\";\r\n\r\n\r\nconst DatatablePage = () => {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const user_id = fun.getItem('user_id');\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n\r\n            await authService.checkAuthTokenTime();\r\n\r\n            const items = await orderService.getAllOrdersForUser(user_id);\r\n\r\n            setItems(items);\r\n        };\r\n        fetchItems();\r\n    }, []);\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n    const data = {\r\n        columns: [\r\n            {\r\n                label: 'Order_id',\r\n                field: 'order_id',\r\n                sort: 'asc',\r\n                width: 100\r\n            },\r\n            {\r\n                label: 'Firstname',\r\n                field: 'firstname',\r\n                sort: 'asc',\r\n                width: 150\r\n            },\r\n            {\r\n                label: 'LastName',\r\n                field: 'lastname',\r\n                sort: 'asc',\r\n                width: 270\r\n            },\r\n            {\r\n                label: 'Email',\r\n                field: 'email',\r\n                sort: 'asc',\r\n                width: 200\r\n            },\r\n            {\r\n                label: 'date_added',\r\n                field: 'date_added',\r\n                sort: 'asc',\r\n                width: 150\r\n            },\r\n            {\r\n                label: 'Order_status',\r\n                field: 'order_status',\r\n                sort: 'asc',\r\n                width: 100\r\n            },\r\n            {\r\n                label: 'telephone',\r\n                field: 'telephone',\r\n                sort: 'asc',\r\n                width: 100\r\n            },\r\n            {\r\n                label: 'Total',\r\n                field: 'total',\r\n                sort: 'asc',\r\n                width: 100\r\n            },\r\n            {\r\n                label: 'Action',\r\n                field: 'action',\r\n                sort: 'asc',\r\n                width: 100\r\n            }\r\n        ],\r\n        rows: items\r\n    };\r\n\r\n\r\n    if (auth_token === 'null' || auth_token === null) {\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"box-page\">\r\n            <Header/>\r\n            <MDBContainer>\r\n                <MDBDataTable\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    data={data}\r\n                />\r\n            </MDBContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(DatatablePage);","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBTable,\r\n    MDBTableBody,\r\n    MDBTableHead,\r\n    MDBBtn,\r\n    MDBIcon,\r\n    MDBCard,\r\n    MDBListGroup,\r\n    MDBListGroupItem\r\n} from \"mdbreact\";\r\nimport \"./order.css\";\r\nimport {Redirect, withRouter, Link} from 'react-router-dom';\r\nimport {authService} from \"../../../shared/auth-service\";\r\nimport {orderService} from \"../../../shared/order-service\";\r\nimport fun from '../../../lib/function'\r\nimport Header from \"../../header\";\r\n\r\n\r\nconst OrderPageInfo = ({match}) => {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n\r\n            await authService.checkAuthTokenTime();\r\n\r\n            const items = await orderService.getInfo(match);\r\n\r\n            setItems(items);\r\n        };\r\n        fetchItems();\r\n    },[match]);\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n    if (auth_token === 'null' || auth_token === null) {\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"box-page\">\r\n            <Header/>\r\n        <MDBContainer>\r\n            <MDBRow>\r\n                <MDBCol md=\"12\"  sm=\"12\" lg=\"4\" >\r\n                    <MDBCard style={{ marginTop: \"1rem\" }}>\r\n                            {items.map((item) => (\r\n                                <MDBListGroup key =\"user-info\">\r\n                                    <MDBListGroupItem>Имя: {item.firstname}</MDBListGroupItem>\r\n                                    <MDBListGroupItem>Фамилия: {item.lastname}</MDBListGroupItem>\r\n                                    <MDBListGroupItem>Email: {item.email}</MDBListGroupItem>\r\n                                    <MDBListGroupItem>Cтатус: {item.order_status}</MDBListGroupItem>\r\n                                    <MDBListGroupItem>Телефон: {item.telephone}</MDBListGroupItem>\r\n                                </MDBListGroup>\r\n                            ))}\r\n                    </MDBCard>\r\n                </MDBCol>\r\n                <MDBCol md=\"12\"  sm=\"12\" lg=\"4\">\r\n                    <MDBCard style={{ marginTop: \"1rem\" }}>\r\n                        {items.map((item) => (\r\n                            <MDBListGroup key =\"user-order-total\">\r\n                                <MDBListGroupItem>Оплата: {item.payment_method}</MDBListGroupItem>\r\n                                <MDBListGroupItem>Город: {item.payment_zone}</MDBListGroupItem>\r\n                                <MDBListGroupItem>Доставка: {item.shipping_method}</MDBListGroupItem>\r\n                                <MDBListGroupItem>Дата: {item.date_added}</MDBListGroupItem>\r\n                                <MDBListGroupItem>Итого: {item.total}</MDBListGroupItem>\r\n                            </MDBListGroup>\r\n                        ))}\r\n                    </MDBCard>\r\n                </MDBCol>\r\n                <MDBCol md=\"12\"  sm=\"12\" lg=\"4\" >\r\n                    <MDBCard style={{ marginTop: \"1rem\" }}>\r\n                        {items.map((item) => (\r\n                            <MDBListGroup key =\"user-order-total\">\r\n                                <MDBListGroupItem>Коментарий: {item.comment}</MDBListGroupItem>\r\n                            </MDBListGroup>\r\n                        ))}\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n            <MDBRow>\r\n                <MDBCol md=\"12\">\r\n                    <MDBTable responsiveSm className=\"table-products\">\r\n                        <MDBTableHead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Model</th>\r\n                                <th>Quantity</th>\r\n                                <th>Price</th>\r\n                                <th>Total</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {items.map(({products:item}) => (\r\n                                item.map((r) => (\r\n                                    r.map((product) => (\r\n                                        <tr key={product.product_id}>\r\n                                            <td>{product.name}</td>\r\n                                            <td>{product.model}</td>\r\n                                            <td>{product.quantity}</td>\r\n                                            <td>{product.price}</td>\r\n                                            <td>{product.total}</td>\r\n                                        </tr>\r\n                                    ))\r\n                                ))\r\n                            ))}\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                </MDBCol>\r\n            </MDBRow>\r\n            <Link to=\"/orders\">\r\n                <MDBBtn>\r\n                    <MDBIcon icon=\"angle-double-left\"/>\r\n                    Назад\r\n                </MDBBtn>\r\n            </Link>\r\n        </MDBContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(OrderPageInfo);","import config from '../app.config'\r\nimport fun from \"../lib/function\";\r\n\r\n\r\nclass CustomerService {\r\n\r\n    constructor(url) {\r\n        this.url = url;\r\n    }\r\n\r\n    async getInfo(user_id) {\r\n        try {\r\n            const data = await fetch(`${this.url}customers/${user_id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                }\r\n            });\r\n            let {result} = await data.json();\r\n            return [result] ;\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n    async updateCutomer(body,user_id) {\r\n        try {\r\n            const data = await fetch(`${this.url}customers/${user_id}`, {\r\n                method:\"PUT\",\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8',\r\n                    'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n                },\r\n                body:JSON.stringify(body)\r\n            });\r\n            // let {result,result_code} = await data.json();\r\n            let {error,result_code} = await data.json();\r\n            return [error,result_code];\r\n        } catch (e) {\r\n            throw  new Error(e)\r\n        }\r\n    }\r\n    async getReward (user_id)  {\r\n        const data = await fetch(`${this.url}customers/reward/${user_id}`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n            }\r\n        });\r\n        let {result} = await data.json();\r\n        let items_to_table = [];\r\n\r\n        result.forEach((elem) => {\r\n            const {description,points,date_added} = elem;\r\n            let date = new Date(date_added);\r\n\r\n            const arrayToTable = {\r\n                description,\r\n                points,\r\n                date_added:fun.formatDate(date)\r\n            };\r\n            items_to_table.push(arrayToTable);\r\n        });\r\n\r\n        return items_to_table;\r\n    }\r\n\r\n    async getRewardTotal (user_id)  {\r\n        const data = await fetch(`${this.url}customers/totalReward/${user_id}`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n            }\r\n        });\r\n        return await data.json();\r\n    }\r\n    async getRewardSum (user_id)  {\r\n        const data = await fetch(`${this.url}customers/totalSum/${user_id}`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + fun.getItem('auth_token')\r\n            }\r\n        });\r\n        return await data.json();\r\n    }\r\n}\r\n\r\nexport const customerService = new CustomerService(config.url);","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBTabPane,\r\n    MDBTabContent,\r\n    MDBNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBCard,\r\n    MDBListGroup,\r\n    MDBListGroupItem,\r\n    MDBBtn,\r\n    MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInputGroup, MDBInput, MDBAlert\r\n} from \"mdbreact\";\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\nimport {authService} from \"../../../shared/auth-service\";\r\nimport {customerService} from \"../../../shared/customer-service\";\r\nimport fun from '../../../lib/function'\r\n\r\nfunction CustomerInfo({toggle, state, update, changeState, setStateFromSevice, modal}) {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n    const user_id = fun.getItem('user_id');\r\n\r\n    const {firstname, lastname, email, telephone} = state.error;\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n            await authService.checkAuthTokenTime();\r\n            const result = await customerService.getInfo(user_id);\r\n            setStateFromSevice(result);\r\n            setItems(result);\r\n        };\r\n        fetchItems();\r\n    }, []);\r\n\r\n\r\n    if (auth_token === 'null' || auth_token === null ) {\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={state.modal} toggle={modal}>\r\n                <MDBModalHeader toggle={modal}>MDBModal title</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div key=\"modal-user\">\r\n                        <div key=\"modal-user\">\r\n                            <MDBInputGroup\r\n                                containerClassName=\"mb-3\"\r\n                                inputs={\r\n                                    <>\r\n                                        <MDBInput\r\n                                            noTag\r\n                                            name=\"firstname\"\r\n                                            onChange={changeState}\r\n                                            value={state.firstname}\r\n                                            id=\"firstname\"\r\n                                        />\r\n                                    </>\r\n                                }\r\n                                prepend=\"FirstName\"\r\n                                size=\"sm\"\r\n                            />\r\n                            {firstname && <MDBAlert color=\"danger\">\r\n                                {firstname ? firstname : ''}\r\n                            </MDBAlert>}\r\n\r\n                            <MDBInputGroup\r\n                                containerClassName=\"mb-3\"\r\n                                inputs={\r\n                                    <>\r\n                                        <MDBInput\r\n                                            noTag\r\n                                            onChange={changeState}\r\n                                            name=\"lastname\"\r\n                                            value={state.lastname}\r\n                                            id=\"lastname\"\r\n                                        />\r\n                                    </>\r\n                                }\r\n\r\n                                prepend=\"LastName\"\r\n\r\n                                size=\"sm\"/>\r\n                            {lastname && <MDBAlert color=\"danger\">\r\n                                {lastname ? lastname : ''}\r\n                            </MDBAlert>}\r\n\r\n                            <MDBInputGroup\r\n                                containerClassName=\"mb-3\"\r\n                                inputs={\r\n                                    <>\r\n                                        <MDBInput\r\n                                            noTag\r\n                                            onChange={changeState}\r\n                                            name=\"email\"\r\n                                            value={state.email}\r\n                                            id=\"email\"\r\n                                        />\r\n                                    </>\r\n                                }\r\n\r\n                                prepend=\"Email\"\r\n                                size=\"sm\"/>\r\n                            {email && <MDBAlert color=\"danger\">\r\n                                {email ? email : ''}\r\n                            </MDBAlert>}\r\n\r\n                            <MDBInputGroup\r\n                                containerClassName=\"mb-3\"\r\n                                inputs={\r\n                                    <>\r\n                                        <MDBInput\r\n                                            noTag\r\n                                            onChange={changeState}\r\n                                            name=\"telephone\"\r\n                                            value={state.telephone}\r\n                                            id=\"telephone\"\r\n                                        />\r\n                                    </>\r\n                                }\r\n\r\n                                prepend=\"Telephone\"\r\n                                size=\"sm\"/>\r\n                            {telephone && <MDBAlert color=\"danger\">\r\n                                {telephone ? telephone : ''}\r\n                            </MDBAlert>}\r\n                        </div>\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={modal}>Close</MDBBtn>\r\n                    <MDBBtn color=\"primary\" onClick={update}>Save changes</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n            <MDBRow>\r\n                <MDBCol md=\"12\">\r\n                    <MDBNav className=\"nav-tabs mt-5\">\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"#\" active={state.activeItem === \"1\"} onClick={toggle(\"1\")} role=\"tab\">\r\n                                Основные данные\r\n                            </MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"#\" active={state.activeItem === \"2\"} onClick={toggle(\"2\")} role=\"tab\">\r\n                                Конакты\r\n                            </MDBNavLink>\r\n                        </MDBNavItem>\r\n                    </MDBNav>\r\n                    <MDBTabContent activeItem={state.activeItem}>\r\n                        <MDBTabPane tabId=\"1\" role=\"tabpanel\">\r\n                            <MDBRow>\r\n                                <MDBCol md=\"4\">\r\n                                    <MDBCard style={{width: \"22rem\", marginTop: \"1rem\"}}>\r\n                                        {items.map((r) => (\r\n                                            <MDBListGroup key={r.customer_id}>\r\n                                                <MDBListGroupItem key=\"firstname\">Имя:{r.firstname}</MDBListGroupItem>\r\n                                                <MDBListGroupItem key=\"lastname\">Фамилия:{r.lastname}</MDBListGroupItem>\r\n                                                <MDBListGroupItem key=\"email\">Почта:{r.email}</MDBListGroupItem>\r\n                                                <MDBListGroupItem\r\n                                                    key=\"telephone\">Telephone:{r.telephone}</MDBListGroupItem>\r\n                                            </MDBListGroup>\r\n                                        ))}\r\n                                    </MDBCard>\r\n                                </MDBCol>\r\n                                <MDBCol md=\"6\">\r\n                                    <MDBListGroupItem><MDBBtn rounded color=\"info\" onClick={modal}>Поменять\r\n                                        данные</MDBBtn></MDBListGroupItem>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                        </MDBTabPane>\r\n                        <MDBTabPane tabId=\"2\" role=\"tabpanel\">\r\n                            <p className=\"mt-2\" id=\"test-panel\">\r\n                                Quisquam aperiam, pariatur. Tempora, placeat ratione porro\r\n                                voluptate odit minima. Lorem ipsum dolor sit amet,\r\n                                consectetur adipisicing elit. Nihil odit magnam minima,\r\n                                soluta doloribus reiciendis molestiae placeat unde eos\r\n                                molestias.\r\n                            </p>\r\n                            <p>\r\n                                Quisquam aperiam, pariatur. Tempora, placeat ratione porro\r\n                                voluptate odit minima. Lorem ipsum dolor sit amet,\r\n                                consectetur adipisicing elit. Nihil odit magnam minima,\r\n                                soluta doloribus reiciendis molestiae placeat unde eos\r\n                                molestias.\r\n                            </p>\r\n                        </MDBTabPane>\r\n                    </MDBTabContent>\r\n                </MDBCol>\r\n\r\n            </MDBRow>\r\n        </MDBContainer>\r\n\r\n    );\r\n};\r\n\r\nexport default withRouter(CustomerInfo);\r\n\r\n","import React, {Component} from 'react';\r\nimport CustomerInfo from './customer-info-page'\r\nimport {customerService} from \"../../../shared/customer-service\";\r\nimport Header from \"../../header\";\r\nimport fun from \"../../../lib/function\";\r\n\r\n\r\nexport default class CustomerPage extends Component {\r\n\r\n    state = {\r\n        email: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        telephone: \"\",\r\n        activeItem: \"1\",\r\n        error: [],\r\n        modal: false\r\n    };\r\n\r\n    toggle = tab => e => {\r\n        if (this.state.activeItem !== tab) {\r\n            this.setState({\r\n                activeItem: tab\r\n            });\r\n        }\r\n    };\r\n\r\n    toggleModal = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    updateInfo = () => {\r\n        let {firstname, lastname, email, telephone} = this.state;\r\n        const user_id = fun.getItem('user_id');\r\n\r\n        customerService.updateCutomer({firstname, lastname, email, telephone},user_id)\r\n            .then((r) => {\r\n                    if (!r[1]) {\r\n                        window.location.reload();\r\n                    } else {\r\n                        this.setState({\r\n                                error: r[0]\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n    };\r\n\r\n    changeState = event => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    setStateFromService = (arr) => {\r\n        arr.map((r) => {\r\n            this.setState({\r\n                firstname: r.firstname,\r\n                lastname: r.lastname,\r\n                email: r.email,\r\n                telephone: r.telephone\r\n            });\r\n            return true;\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"box-page\">\r\n                <Header/>\r\n                <CustomerInfo toggle={this.toggle}\r\n                              state={this.state}\r\n                              modal={this.toggleModal}\r\n                              changeState={this.changeState}\r\n                              setStateFromSevice={this.setStateFromService}\r\n                              update={this.updateInfo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {\r\n    MDBBtn,\r\n    MDBIcon\r\n} from \"mdbreact\";\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport const ExportCSV = ({csvData, fileName}) => {\r\n\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const exportToCSV = (csvData, fileName) => {\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    };\r\n\r\n    return (\r\n        <MDBBtn onClick={(e) => exportToCSV(csvData,fileName)}><MDBIcon icon=\"upload\" />Export</MDBBtn>\r\n    )\r\n};","import React, {useState, useEffect} from 'react';\r\nimport {MDBDataTable, MDBContainer, MDBBtn, MDBIcon} from 'mdbreact';\r\nimport {ExportCSV} from '../buttons/exports';\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\nimport {authService} from '../../shared/auth-service'\r\nimport {customerService} from \"../../shared/customer-service\";\r\nimport fun from \"../../lib/function\";\r\nimport Header from \"../header\";\r\n\r\n\r\nconst BalancePage = () => {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const user_id = fun.getItem('user_id');\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async () => {\r\n\r\n            await authService.checkAuthTokenTime();\r\n\r\n            const items = await customerService.getReward(user_id);\r\n            const {result:{count}} = await customerService.getRewardTotal(user_id);\r\n            const {result:{total}} = await customerService.getRewardSum(user_id);\r\n            const arrayTostate = {items,count,total};\r\n            setItems(arrayTostate);\r\n        };\r\n\r\n        fetchItems();\r\n    }, []);\r\n\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n\r\n    if (auth_token === 'null' || auth_token === null) {\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n    const data = {\r\n        columns: [\r\n            {\r\n                label: 'Description',\r\n                field: 'description',\r\n                sort: 'asc',\r\n                width: 200\r\n            },\r\n            {\r\n                label: 'Point',\r\n                field: 'points',\r\n                sort: 'asc',\r\n                width: 100\r\n            },\r\n            {\r\n                label: 'Date',\r\n                field: 'date_added',\r\n                sort: 'asc',\r\n                width: 150\r\n            }\r\n        ],\r\n        rows: items.items\r\n    };\r\n\r\n    return (\r\n        <div className=\"box-page\">\r\n            <Header/>\r\n            <MDBContainer>\r\n\r\n\r\n                <span className=\"total-block btn btn-sm btn-slack\">\r\n                    Сумма\r\n                    <span className=\"counter-sum\">{items.total}</span>\r\n                </span>\r\n                <span className=\"count-block btn btn-sm btn-slack\">\r\n                    Всего заказов\r\n                     <span className=\"counter-count\">{items.count}</span>\r\n                </span>\r\n\r\n                <ExportCSV csvData={items.items} fileName={\"balance\"}/>\r\n                <MDBDataTable\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    data={data}\r\n                />\r\n            </MDBContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(BalancePage);","import React, {useEffect} from 'react';\r\nimport {MDBIcon, MDBContainer, MDBRow, MDBCol} from 'mdbreact';\r\nimport {Redirect,withRouter} from 'react-router-dom';\r\nimport {authService} from '../../shared/auth-service'\r\nimport fun from \"../../lib/function\";\r\nimport Header from \"../header\";\r\n\r\nconst DocumentPage = () => {\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n    useEffect(() => {\r\n        const user_func = async ()=>{\r\n            await authService.checkAuthTokenTime();\r\n        };\r\n\r\n        user_func();\r\n    },[]);\r\n\r\n    if(auth_token === 'null' || auth_token === null){\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"box-page\">\r\n            <Header/>\r\n        <MDBContainer>\r\n            <MDBRow>\r\n                <MDBCol md=\"3\" className=\"mb-3 mt-3\">\r\n                    <p>Файл откроется в новой вкладе. <br/>\r\n                        Вы сможете его сохранить нажав правой клавишой мышки и выбрав пункт сохранить как .</p>\r\n                    <a href=\"https://zoocomplex.com.ua/prom.xml\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                       download=\"http://zoocomplex.com.ua/prom.xml\">\r\n                        <button className=\"btn\">Скачать файл <MDBIcon icon=\"download\"/></button>\r\n                    </a>\r\n\r\n\r\n                </MDBCol>\r\n            </MDBRow>\r\n\r\n        </MDBContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(DocumentPage);\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {MDBCard, MDBContainer, MDBCardBody, MDBIcon, MDBRow, MDBCol, MDBCardText} from 'mdbreact';\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\nimport fun from \"../../lib/function\";\r\nimport {authService} from '../../shared/auth-service'\r\nimport Header from \"../header\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const auth_token = fun.getItem('auth_token');\r\n\r\n    useEffect(() => {\r\n        const user_func = async ()=>{\r\n            await authService.checkAuthTokenTime();\r\n        };\r\n\r\n        user_func();\r\n    },[]);\r\n\r\n    if (auth_token === 'null' || auth_token === null) {\r\n        return (\r\n            <Redirect to=\"/login\"/>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"box-page\">\r\n            <Header/>\r\n            <MDBContainer>\r\n                <MDBRow className=\"mb-4\">\r\n                    <MDBCol xl=\"3\" md=\"6\" className=\"mb-r\">\r\n                        <MDBCard className=\"cascading-admin-card\">\r\n                            <div className=\"admin-up\">\r\n                                <MDBIcon icon=\"money-bill-alt\" className=\"primary-color\"/>\r\n                                <div className=\"data\">\r\n                                    <p>SALES</p>\r\n                                    <h4>\r\n                                        <strong>$2000</strong>\r\n                                    </h4>\r\n                                </div>\r\n                            </div>\r\n                            <MDBCardBody>\r\n                                <div className=\"progress\">\r\n                                    <div aria-valuemax=\"100\" aria-valuemin=\"0\" aria-valuenow=\"25\"\r\n                                         className=\"progress-bar bg-primary\" role=\"progressbar\"\r\n                                         style={{width: '25%'}}></div>\r\n                                </div>\r\n                                <MDBCardText>Better than last week (25%)</MDBCardText>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol xl=\"3\" md=\"6\" className=\"mb-r\">\r\n                        <MDBCard className=\"cascading-admin-card\">\r\n                            <div className=\"admin-up\">\r\n                                <MDBIcon icon=\"chart-line\" className=\"warning-color\"/>\r\n                                <div className=\"data\">\r\n                                    <p>SUBSCRIPTIONS</p>\r\n                                    <h4>\r\n                                        <strong>200</strong>\r\n                                    </h4>\r\n                                </div>\r\n                            </div>\r\n                            <MDBCardBody>\r\n                                <div className=\"progress\">\r\n                                    <div aria-valuemax=\"100\" aria-valuemin=\"0\" aria-valuenow=\"25\"\r\n                                         className=\"progress-bar bg grey\" role=\"progressbar\"\r\n                                         style={{width: '25%'}}></div>\r\n                                </div>\r\n                                <MDBCardText>Worse than last week (25%)</MDBCardText>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol xl=\"3\" md=\"6\" className=\"mb-r\">\r\n                        <MDBCard className=\"cascading-admin-card\">\r\n                            <div className=\"admin-up\">\r\n                                <MDBIcon icon=\"chart-pie\" className=\"light-blue lighten-1\"/>\r\n                                <div className=\"data\">\r\n                                    <p>TRAFFIC</p>\r\n                                    <h4>\r\n                                        <strong>20000</strong>\r\n                                    </h4>\r\n                                </div>\r\n                            </div>\r\n                            <MDBCardBody>\r\n                                <div className=\"progress\">\r\n                                    <div aria-valuemax=\"100\" aria-valuemin=\"0\" aria-valuenow=\"25\"\r\n                                         className=\"progress-bar grey darken-2\" role=\"progressbar\"\r\n                                         style={{width: '75%'}}></div>\r\n                                </div>\r\n                                <MDBCardText>Worse than last week (75%)</MDBCardText>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol xl=\"3\" md=\"6\" className=\"mb-r\">\r\n                        <MDBCard className=\"cascading-admin-card\">\r\n                            <div className=\"admin-up\">\r\n                                <MDBIcon icon=\"chart-bar\" className=\"red accent-2\"/>\r\n                                <div className=\"data\">\r\n                                    <p>ORGANIC TRAFFIC</p>\r\n                                    <h4>\r\n                                        <strong>2000</strong>\r\n                                    </h4>\r\n                                </div>\r\n                            </div>\r\n                            <MDBCardBody>\r\n                                <div className=\"progress\">\r\n                                    <div aria-valuemax=\"100\" aria-valuemin=\"0\" aria-valuenow=\"25\"\r\n                                         className=\"progress-bar bg-primary\" role=\"progressbar\"\r\n                                         style={{width: '25%'}}></div>\r\n                                </div>\r\n                                <MDBCardText>Better than last week (25%)</MDBCardText>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(MainPage);\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Bus from '../../Utils/Bus';\r\n\r\nimport './index.css';\r\n\r\nexport const Flash = () => {\r\n    let [visibility, setVisibility] = useState(false);\r\n    let [message, setMessage] = useState('');\r\n    let [type, setType] = useState('');\r\n\r\n    useEffect(() => {\r\n        Bus.addListener('flash', ({message, type}) => {\r\n            setVisibility(true);\r\n            setMessage(message);\r\n            setType(type);\r\n            setTimeout(() => {\r\n                setVisibility(false);\r\n            }, 8000);\r\n        });\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(document.querySelector('.close') !== null) {\r\n            document.querySelector('.close').addEventListener('click', () => setVisibility(false));\r\n        }\r\n    });\r\n\r\n    return (\r\n        visibility && <div className={`alert-flash alert-${type}`}>\r\n            <span className=\"close\"><strong>X</strong></span>\r\n            <p>{message}</p>\r\n        </div>\r\n    )\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport Bus from \"../../Utils/Bus\"\r\nimport './App.css';\r\nimport {\r\n    ContactPage,\r\n    LoginPage,\r\n    Orders,\r\n    CustomerPage,\r\n    BalancePage,\r\n    DocumentPage,\r\n    OrderPageInfo,\r\n    MainPage\r\n} from \"../pages\";\r\nimport {Flash} from \"../Flash\"\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nexport default function App() {\r\n\r\n\r\n    window.flash = (message, type = \"success\") => Bus.emit ('flash', ({message, type}));\r\n    return (\r\n\r\n        <Router>\r\n\r\n            <div className=\"App\">\r\n                <Flash />\r\n                <Switch>\r\n                    <Route path='/' exact render={() => (\r\n                        <MainPage/>\r\n                    )}/>\r\n                    <Route path=\"/contact\" render={() => (\r\n                        <ContactPage/>\r\n                    )}/>\r\n                    <Route path=\"/orders\" exact render={() => (\r\n                        <Orders/>\r\n                    )}/>\r\n                    <Route path=\"/orders/:id\" render={() => (\r\n                        <OrderPageInfo />\r\n                    )}/>\r\n                    <Route path=\"/customer-info\" render={() => (\r\n                        <CustomerPage/>\r\n                    )}/>\r\n                    <Route path=\"/balance\" render={() => (\r\n                        <BalancePage/>\r\n                    )}/>\r\n                    <Route path=\"/document\" render={() => (\r\n                        <DocumentPage/>\r\n                    )}/>\r\n                    <Route path=\"/login\" component={LoginPage}/>\r\n                    <Route render={() => <h2>Page not found</h2>}/>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n"],"sourceRoot":""}